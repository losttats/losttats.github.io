<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>web基础知识</title>
    <url>/2020/02/24/web/</url>
    <content><![CDATA[<h2 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h2><h3 id="HTTP简介"><a href="#HTTP简介" class="headerlink" title="HTTP简介"></a>HTTP简介</h3><ul>
<li><p>HTTP协议是Hyper Text Transfer Protocol（超文本传输协议）的缩写，是用于从万维网服务器传输超文本到本地浏览器的传输协议</p>
</li>
<li><p>HTTP基于TCP/IP通信协议来传输数据（HTML文件，图片文件，查询结果等）</p>
</li>
<li><p>HTTP是一个属于应用层的面对对象的协议</p>
</li>
<li><p>HTTP协议工作于客户端-服务端架构之上。浏览器作为HTTP客户端通过URL向HTTP服务端，即web服务器发送所有请求。web服务器根据接收到的请求向客户端发送响应信息</p>
<a id="more"></a>
<h3 id="HTTP主要特点"><a href="#HTTP主要特点" class="headerlink" title="HTTP主要特点"></a>HTTP主要特点</h3></li>
<li><p>简单快速：客户端向服务端请求服务时，只需传送请求方法和路径。请求方法常有GET、POST等。每种方法规定了客户端与服务端联系的类型不同。由于HTTP协议简单，使得HTTP服务器的程序规模小，通信速度快。</p>
</li>
<li><p>灵活：HTTP允许传输任意类型的数据对象。正在传输的类型由Content-Type加以标记</p>
</li>
<li><p>无连接：限制每次连接只处理一个请求。服务器处理完客户的请求并收到客户的应答之后断开连接。这种方式可以节省传输时间</p>
</li>
<li><p>无状态：协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。但是在服务器不需要先前信息时，它的应答就比较快</p>
</li>
<li><p>支持B/S及C/S模式</p>
</li>
</ul>
<h3 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h3><p>HTTP使用统一资源标识符（Uniform Resource Identifiers，URI）来传输数据和建立连接。URL（Uniform Resource Locator）是一种特殊类型的URI，包含了用于查找某个资源的足够信息，是互联网上用来标识某一处资源的地址。</p>
<p><a href="http://www.aspxfans.com:8080/news/index.asp?boardID=5&amp;ID=24618&amp;page=1#name" target="_blank" rel="noopener">http://www.aspxfans.com:8080/news/index.asp?boardID=5&amp;ID=24618&amp;page=1#name</a></p>
<p>以上面的URL为例，可得知一个完整的URL包含以下几部分</p>
<ol>
<li><p>协议部分：该URL的协议部分为<strong>http:</strong>,这代表网页使用的是HTTP协议，其后的 // 为分隔符</p>
</li>
<li><p>域名部分：该URL的域名部分为<strong><a href="http://www.aspxfans.com" target="_blank" rel="noopener">www.aspxfans.com</a></strong>。一个URL中也可使用IP地址作为域名使用</p>
</li>
<li><p>端口部分：跟在域名后面的是端口，域名端口之间使用 ： 作为分隔符。端口不是一个URL必须的部分，如果省略端口部分，将采用默认端口</p>
</li>
<li><p>虚拟目录部分：从域名后的第一个 / 开始到最后一个 / 为止，都是虚拟目录部分。虚拟目录也不是一个URL必须的部分。本例的虚拟目录为 /news/</p>
</li>
<li><p>文件名部分：从域名的最后一个 / 到 ？ 为止，是文件名部分，如果没有 ？ ，则是从域名后的最后一个 / 开始到 # 为止，是文件名部分。如果 ？ 和 # 都没有，则从域名的最后一个 / 到结束都是文件名部分。本例中的文件名部分是<strong>index.asp</strong>。文件名也不是一个URL必须的部分，如果省略则会使用默认文件名。</p>
</li>
<li><p>参数部分：从 ？ 开始到 # 为止之间的部分为参数部分，又称为搜索部分、查询部分。参数部分允许有多个参数，参数与参数之间使用 &amp; 作为分隔符</p>
</li>
<li><p>锚部分：从 # 开始到最后都是锚部分。锚部分也不是一个URL必须的部分</p>
</li>
</ol>
<h3 id="URL和URI的区别"><a href="#URL和URI的区别" class="headerlink" title="URL和URI的区别"></a>URL和URI的区别</h3><blockquote>
<p>URI用来唯一地标识某一个资源</p>
</blockquote>
<p>Web上可用的每种资源，如HTML文档、图像、视频片段、程序等等都是用一个URI来定位的。URI一般由三部分组成：</p>
<ol>
<li><p>访问资源的命名机制</p>
</li>
<li><p>存放资源的主机名</p>
</li>
<li><p>资源自身的名称，由路径标识，着重强调于资源</p>
</li>
</ol>
<blockquote>
<p>URL是一种具体的URI，即URL可以用来标识一个资源，而且还指明了如何locate这个资源</p>
</blockquote>
<p>URL是Internet上面用来描述信息资源的字符串，主要在各种WWW客户程序和服务器程序上，特别是著名的Mosaic。    </p>
<p>采用URL可以用一种统一的格式来描述各种信息资源，包括文件、服务器的地址和目录等等。URL一般由三部分组成：</p>
<ol>
<li><p>协议（服务方式）</p>
</li>
<li><p>存有该资源的主机IP地址（端口号）</p>
</li>
<li><p>主机资源的具体地址，如目录和文件名等等</p>
</li>
</ol>
<blockquote>
<p>URN，uniform resource name，通过名字来标识资源，比如mailto：<a href="mailto:java-net@java.sun.com">java-net@java.sun.com</a></p>
</blockquote>
<p>URI是以一种抽象的，高层次的概念定义统一资源标识，而URL和URN则是具体的资源标识方式。URL和URN都是一种URI。每个URL都是一个URI，但不一定每个URI都是URL。因为URI还包括一个子类，即URN，它命名资源但不指定如何定位资源。</p>
<h3 id="请求消息Request"><a href="#请求消息Request" class="headerlink" title="请求消息Request"></a>请求消息Request</h3><blockquote>
<p>客户端发送一个HTTP请求到服务器的请求消息包括以下格式：请求行、请求头部、空行和请求数据</p>
</blockquote>
<p><img src="../images/httpRequest.png" alt="http请求消息结构"></p>
<p>Get请求例子：   </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;562f25980001b1b106000338.jpg HTTP&#x2F;1.1  </span><br><span class="line">Host    img.mukewang.com    </span><br><span class="line">User-Agent    Mozilla&#x2F;5.0 (Windows NT 10.0; WOW64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;51.0.2704.106 Safari&#x2F;537.36    </span><br><span class="line">Accept    image&#x2F;webp,image&#x2F;*,*&#x2F;*;q&#x3D;0.8  </span><br><span class="line">Referer    http:&#x2F;&#x2F;www.imooc.com&#x2F;    </span><br><span class="line">Accept-Encoding    gzip, deflate, sdch  </span><br><span class="line">Accept-Language    zh-CN,zh;q&#x3D;0.8</span><br></pre></td></tr></table></figure>

<ol>
<li><p>请求行，用来说明请求类型、要访问的资源以及所使用的HTTP版本。本例中的请求行为GET /562f25980001b1b106000338.jpg HTTP/1.1</p>
</li>
<li><p>请求头部，紧接着请求行之后的部分，用于说明服务器要使用的附加信息。本例中从第二行起为请求头部。HOST将指出请求的目的地。User-Agent标识服务器端和客户端脚本都能访问它，它是浏览器类型检测逻辑的重要基础。该信息由你的浏览器来定义，并且在每个请求中自动发送等等。</p>
</li>
<li><p>空行，请求头部后面的空行是必须的。即使第四部分的请求数据为空，也必须要有空行</p>
</li>
<li><p>请求数据也叫主体，可以添加任意其他数据。本例无请求数据。</p>
</li>
</ol>
<h3 id="响应消息Response"><a href="#响应消息Response" class="headerlink" title="响应消息Response"></a>响应消息Response</h3><blockquote>
<p>一般情况下，服务器接收并处理客户端发过来的请求后会返回一个HTTP的响应消息，该响应也由四个部分组成：状态行、消息报头、空行和响应正文</p>
</blockquote>
<p>例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HTTP&#x2F;1.1 200 OK</span><br><span class="line">Date: Fri, 22 May 2009 06:07:21 GMT</span><br><span class="line">Content-Type: text&#x2F;html; charset&#x3D;UTF-8</span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line">      &lt;head&gt;&lt;&#x2F;head&gt;</span><br><span class="line">      &lt;body&gt;</span><br><span class="line">            &lt;!--body goes here--&gt;</span><br><span class="line">      &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<ol>
<li><p>状态行，由HTTP协议版本号、状态码、状态消息三部分组成</p>
</li>
<li><p>消息报头，用来说明客户端要使用的一些附加信息</p>
</li>
<li><p>空行，消息报头后面的空行是必须的</p>
</li>
<li><p>响应正文，服务器返回给客户端的文本信息</p>
</li>
</ol>
<h3 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h3><blockquote>
<p>状态码由三位数字组成，第一个数字定义了响应的类别，共分五种类别。</p>
</blockquote>
<ul>
<li><p>1xx：指示信息：表示请求已接受，继续处理</p>
</li>
<li><p>2xx：成功：表示请求已被成功接收</p>
</li>
<li><p>3xx：重定向：要完成请求必须进行更进一步的操作</p>
</li>
<li><p>4xx：客户端错误：请求有语法错误或请求无法实现</p>
</li>
<li><p>5xx：服务端错误：服务器未能实现合法的请求</p>
</li>
</ul>
<p>常见状态码：</p>
<ul>
<li><p>200 OK：客户端请求成功</p>
</li>
<li><p>400 Bad Request：客户端请求有语法错误，不能被服务端理解</p>
</li>
<li><p>401 Unauthorized：请求未经授权，这个状态码必须和WWW-Authenticate报头域一起使用</p>
</li>
<li><p>403 Forbidden：服务器收到请求，但是拒绝提供服务</p>
</li>
<li><p>404 Not Found：请求资源不存在</p>
</li>
<li><p>500 Internal Server Error：服务器发生预期外的错误</p>
</li>
<li><p>503 Server Unavailable：服务器当前不能处理客户端请求，一段时间后可能恢复正常</p>
</li>
</ul>
<h3 id="请求方法"><a href="#请求方法" class="headerlink" title="请求方法"></a>请求方法</h3><blockquote>
<p>根据HTTP协议，HTTP请求可以使用多种请求方法</p>
</blockquote>
<p>HTTP1.0定义了三种请求方法：GET、POST和HEAD。    </p>
<p>HTTP1.1新增了五种请求方法：OPTIONS、PUT、DELETE、TRACE和CONNECT。</p>
<ul>
<li><p>GET：请求指定的页面信息并返回实体主体</p>
</li>
<li><p>POST：向指定资源提交数据进行处理请求。数据被包含在请求体中。</p>
</li>
<li><p>HEAD：类似于GET请求，只不过返回的响应中没有具体的内容，用于获取报头</p>
</li>
<li><p>PUT：从客户端向服务器传输的数据取代指定文档的内容</p>
</li>
<li><p>DELETE：请求服务器删除指定的页面</p>
</li>
<li><p>CONNECT：HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器</p>
</li>
<li><p>OPTIONS：允许客户端查看服务器的性能</p>
</li>
<li><p>TRACE：回显服务器收到的请求，主要用于测试或诊断</p>
</li>
</ul>
<h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><p>HTTP请求/响应的步骤</p>
<ol>
<li><p>客户端连接到web服务器<br>一个HTTP客户端，通常是浏览器，与web服务器的HTTP端口建立一个TCP套接字连接</p>
</li>
<li><p>发送HTTP请求<br>通过TCP套接字，客户端向web服务器发送一个文本的请求报文，一个请求报文由请求行、请求头部、空行和请求数据四部分组成</p>
</li>
<li><p>服务器接受请求并返回HTTP响应<br>web服务器解析请求，定位请求资源。服务器将资源副本写到TCP套接字，由客户端读取。一个响应由状态行、响应头部、空行和响应数据四部分组成</p>
</li>
<li><p>释放连接<br>若connection模式为close，则服务器主动关闭TCP连接，客户端被动关闭连接。若connection模式为keepalive，则该连接会保持一段时间，在该时间内可以继续接收请求</p>
</li>
<li><p>客户端解析HTML内容<br>客户端首先解析状态行，查明请求是否成功。然后解析每一个响应头，响应头告知以下为若干字节的HTML文档和文档的字符集。客户端浏览器读取响应数据HTML，根据HTML语法对其进行格式化，冰在浏览器窗口显示</p>
</li>
</ol>
<p>在浏览器地址栏输入URL，按下回车后会经历以下流程：</p>
<ol>
<li><p>浏览器向DNS服务器请求解析该URL中的域名所对应的IP地址</p>
</li>
<li><p>解析出IP地址后，根据该IP地址和默认端口80，和服务器建立TCP连接</p>
</li>
<li><p>浏览器发出读取文件（URL中域名后面部分对应的文件）的HTTP请求，该请求报文作为TCP三次握手的第三个报文的数据发送给服务器</p>
</li>
<li><p>服务器对浏览器请求做出响应，并把对应地HTML文本发送给浏览器</p>
</li>
<li><p>释放TCP连接</p>
</li>
<li><p>浏览器将该HTML文本显示为内容</p>
</li>
</ol>
<h3 id="GET和POST请求的区别"><a href="#GET和POST请求的区别" class="headerlink" title="GET和POST请求的区别"></a>GET和POST请求的区别</h3><ol>
<li><p>GET提交请求的数据会附在URL后面。如果数据是英文字母/数字则原样发送，如果是中文/其它字符，则把字符串用BASE64加密传输。POST提交把数据放置在HTTP包的包体中</p>
</li>
<li><p>传输数据的大小。HTTP协议并没有对传输的数据大小进行限制，HTTP协议规范也没有对URL长度进行限制。</p>
<p> 而在实际开发中存在的限制主要有：</p>
<p> GET：特定的浏览器和服务器对URL的长度有限制，例如IE对URL长度的限制是2083字节。对于其他浏览器，理论上没有长度限制，其限制取决于操作系统的支持。因为对于GET请求，传输数据就会受到URL长度的限制</p>
<p> POST：由于不是通过URL传值，理论上数据不受限。但实际上各个web服务器会规定对POST提交数据大小进行限制</p>
</li>
<li><p>安全性。POST安全性是要比GET高的。</p>
</li>
</ol>
<h2 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h2><h3 id="OSI、TCP-IP各层的结构与功能"><a href="#OSI、TCP-IP各层的结构与功能" class="headerlink" title="OSI、TCP/IP各层的结构与功能"></a>OSI、TCP/IP各层的结构与功能</h3><ul>
<li><p>OSI：应用层、表示层、会话层、运输层、网络层、数据链路层、物理层</p>
</li>
<li><p>TCP/IP：应用层（各种应用层协议：TELNET、FTP、SMTP…)、运输层（TCP或UDP）、网际层IP、网络接口层</p>
</li>
<li><p>五层协议：应用层、运输层、网络层、数据链路层、物理层</p>
</li>
</ul>
<h4 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h4><p>应用层的任务是通过应用进程间的交互来完成特定的网络应用。应用层协议定义的是应用进程（主机中正在运行的程序）间的通信和交互的规则。对于不同的网络应用需要不同的应用层协议。在互联网中应用层协议很多，如域名系统DNS，支持万维网应用的HTTP协议，支持电子邮件的SMTP协议等等。我们把应用层交互的数据单元称为报文。</p>
<h4 id="运输层"><a href="#运输层" class="headerlink" title="运输层"></a>运输层</h4><p>运输层的主要任务就是负责向两台主机进程之间的通信提供通用的数据传输服务。应用进程利用该服务传送应用层报文。“通用的”是指并不针对某一个特定的网络应用，而是多种应用可以使用同一个运输层服务。由于一台主机可同时运行多个线程，因此运输层有复用和分用的功能。所谓复用就是指多个应用层进程可同时使用下面运输层的服务，分用和复用相反，是运输层把收到的信息分别交付上面应用层中的相应进程。<br>运输层主要使用以下两种协议： </p>
<ul>
<li><p>传输控制协议TCP：提供面向连接的、可靠的数据传输服务</p>
</li>
<li><p>用户数据协议UDP：提供无连接的、尽最大努力的数据传输服务（不保证数据传输的可靠性）       </p>
</li>
</ul>
<p>UDP的主要特点：</p>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title>react基础知识</title>
    <url>/2020/02/23/react/</url>
    <content><![CDATA[<h2 id="react事件机制原理"><a href="#react事件机制原理" class="headerlink" title="react事件机制原理"></a>react事件机制原理</h2><h3 id="对事件机制的初步理解"><a href="#对事件机制的初步理解" class="headerlink" title="对事件机制的初步理解"></a>对事件机制的初步理解</h3><p>react的所有事件并没有绑定到具体的DOM节点上，而是绑定在了document上面，然后由统一的事件处理程序来处理。同时，基于浏览器的事件机制（冒泡），所有节点的事件都会在document上触发。</p>
<p>因为合成事件的触发是基于浏览器的事件机制来实现的，通过冒泡机制冒泡到最顶层元素，然后再由dispatchEvent统一处理。因此有</p>
<ul>
<li>原生事件阻止冒泡肯定会组织合成事件的触发</li>
<li>合成事件阻止冒泡不会影响原生事件</li>
</ul>
<p>浏览器的事件执行需要经过三个阶段：捕获阶段→目标元素阶段→冒泡阶段。</p>
<p>节点上的原生事件执行是在目标阶段，而合成事件执行是在冒泡阶段。故原生事件执行先于合成事件。二者最好不要混用。</p>
<a id="more"></a>
<h3 id="对于合成的理解"><a href="#对于合成的理解" class="headerlink" title="对于合成的理解"></a>对于合成的理解</h3><ul>
<li>对原生事件的封装</li>
<li>对某些原生事件的升级和改造</li>
<li>不同浏览器事件的兼容处理</li>
</ul>
<h3 id="事件注册机制"><a href="#事件注册机制" class="headerlink" title="事件注册机制"></a>事件注册机制</h3><p>react事件注册过程其实主要做了两件事情：事件注册、事件储存。</p>
<p>事件注册：组件挂载阶段，根据组件内的声明的事件类型——onChange、onClick等，给document上添加事件（addEventListener），并指定统一的事件处理程序dispatchEvent。<br>事件储存：把react组件内的所有事件统一的存放到一个对象中，缓存起来，为了触发事件的时候查找到对应的方法执行。</p>
<p>具体步骤：首先react拿到将要挂载的组件的虚拟DOM，然后处理其props，判断其内是否有声明为事件的属性，比如onClick等。得到事件的类型和事件对应的处理程序Fn后执行以下三步：</p>
<ul>
<li>完成事件注册</li>
<li>将react DOM、事件类型、处理函数Fn放入数组存储</li>
<li>组件挂载完成后，处理上一步生成的数组，经过遍历把事件处理函数存到listenerBank（一个对象）中</li>
</ul>
<h3 id="事件执行机制"><a href="#事件执行机制" class="headerlink" title="事件执行机制"></a>事件执行机制</h3><p>事件触发过程：</p>
<ul>
<li>进入统一的事件分发函数（dispatchEvent）</li>
<li>结合原生事件找到当前节点对应的ReactDOMComponent对象</li>
<li>开始事件的合成<ul>
<li>根据当前事件类型生成指定的合成对象</li>
<li>封装原生事件和冒泡机制</li>
<li>查找当前元素及其所有父级</li>
<li>在listenerBank中查找事件回调并合成到event</li>
</ul>
</li>
<li>批量处理合成事件内的回调事件</li>
</ul>
]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title>JS小技巧</title>
    <url>/2020/02/23/jsSkill/</url>
    <content><![CDATA[<h2 id="js创建对象"><a href="#js创建对象" class="headerlink" title="js创建对象"></a>js创建对象</h2><ol>
<li><p>工厂模式</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">   function createPerson(name)&#123;</span><br><span class="line">		var o &#x3D; new Object();</span><br><span class="line">		o.name &#x3D; name;</span><br><span class="line">		o.getName &#x3D; function()&#123;</span><br><span class="line">			console.log(this.name);</span><br><span class="line">		&#125;</span><br><span class="line">		return o;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>无法识别对象，所有实例都指向同一个原型</p>
</blockquote>
<a id="more"></a></li>
<li><p>构造函数模式</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">   function Person(name)&#123;</span><br><span class="line">		this.name &#x3D; name;</span><br><span class="line">		this.getName &#x3D; function()&#123;</span><br><span class="line">			console.log(this.name);</span><br><span class="line">		&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>每次创建实例都会创建一遍方法</p>
</blockquote>
</li>
<li><p>构造函数模式优化</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">   function Person(name)&#123;</span><br><span class="line">		this.name &#x3D; name;</span><br><span class="line">		this.getName &#x3D; getName;</span><br><span class="line">&#125;</span><br><span class="line">function getName()&#123;</span><br><span class="line">		console.log(this.name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>封装性差</p>
</blockquote>
</li>
<li><p>原型模式1.0</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">   function Person(name)&#123;</span><br><span class="line">			</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.name &#x3D; &#39;keivn&#39;;</span><br><span class="line">Person.prototype.getName &#x3D; function()&#123;</span><br><span class="line">		console.log(this.name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>所有属性和方法都共享，不能初始化参数，封装性差</p>
</blockquote>
</li>
<li><p>原型模式2.0</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">   function Person(name)&#123;</span><br><span class="line">			</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype &#x3D; &#123;</span><br><span class="line">	name:&#39;kevin&#39;,</span><br><span class="line">	getName:function()&#123;</span><br><span class="line">    	console.log(this.name);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>重写了原型，丢失了constructor属性</p>
</blockquote>
</li>
<li><p>原型模式3.0</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">   function Person(name)&#123;</span><br><span class="line">			</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype &#x3D; &#123;</span><br><span class="line">	constructor:Person,</span><br><span class="line">	name:&#39;kevin&#39;,</span><br><span class="line">	getName:function()&#123;</span><br><span class="line">		console.log(this.name);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>未解决根本问题</p>
</blockquote>
</li>
<li><p>组合模式</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">   function Person(name)&#123;</span><br><span class="line">	this.name &#x3D; name</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype &#x3D; &#123;</span><br><span class="line">	constructor:Person,</span><br><span class="line">	getName:function()&#123;</span><br><span class="line">		console.log(this.name);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>封装性有待提高</p>
</blockquote>
</li>
<li><p>动态原型模式</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">   function Person(name)&#123;</span><br><span class="line">	this.name &#x3D; name;</span><br><span class="line">	if(typeof this.getName !&#x3D; &#39;function&#39;)&#123;</span><br><span class="line">	    Person.prototype.getName &#x3D; function()&#123;</span><br><span class="line">			console.log(this.name);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>避免了重复创造函数</p>
</blockquote>
</li>
<li><p>寄生构造函数模式</p>
<blockquote>
<p>和工厂模式一模一样，只是在创建实例时用new关键字</p>
</blockquote>
</li>
<li><p>稳妥构造函数模式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">   function person(name)&#123;</span><br><span class="line">	var o &#x3D; new Object();</span><br><span class="line">	o.sayName &#x3D; function()&#123;</span><br><span class="line">		console.log(name);</span><br><span class="line">	&#125;</span><br><span class="line">	return o;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>没有公共属性，其方法也不引用this，适合安全环境</p>
</blockquote>
</li>
</ol>
<h2 id="js继承"><a href="#js继承" class="headerlink" title="js继承"></a>js继承</h2><ol>
<li><p>原型链继承</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">   function Parent()&#123;</span><br><span class="line">	this.name &#x3D; &#39;kevin&#39;</span><br><span class="line">&#125;</span><br><span class="line">Parent.prototype.getName &#x3D; function ()&#123;</span><br><span class="line">	console.log(this.name);</span><br><span class="line">&#125;</span><br><span class="line">function Child()&#123;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line">Child.prototype &#x3D; new Parent();</span><br></pre></td></tr></table></figure>
<blockquote>
<p>引用类型的属性会被所有实例共享并同时修改，在创建Child实例时不能向Parent传参</p>
</blockquote>
</li>
<li><p>经典继承（借用构造函数）</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">   function Parent(age)&#123;</span><br><span class="line">	this.names &#x3D; [&#39;k&#39;,&#39;d&#39;]</span><br><span class="line">	this.age &#x3D; age</span><br><span class="line">&#125;</span><br><span class="line">function Child(age)&#123;</span><br><span class="line">	Parent.call(this,age)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>组合继承</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">   function Parent(name)&#123;</span><br><span class="line">	this.name &#x3D; name</span><br><span class="line">	this.colors &#x3D; [&#39;red&#39;,&#39;blue&#39;,&#39;green&#39;]</span><br><span class="line">&#125;</span><br><span class="line">Parent.prototype.getName &#x3D; function()&#123;</span><br><span class="line">	console.log(this.name);</span><br><span class="line">&#125;</span><br><span class="line">function Child(name,age)&#123;</span><br><span class="line">	Parent.call(this,name)</span><br><span class="line">	this.age &#x3D; age</span><br><span class="line">&#125;</span><br><span class="line">Child.prototype &#x3D; new Parent();</span><br><span class="line">Child.prototype.constructor &#x3D; Child</span><br></pre></td></tr></table></figure>
</li>
<li><p>原型式继承</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">   function createObj(o)&#123;</span><br><span class="line">	function F()&#123;&#125;</span><br><span class="line">	F.prototype &#x3D; o</span><br><span class="line">	return new F()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>将传入的对象作为创建对象的原型。引用类型的属性会被共享</p>
</blockquote>
</li>
<li><p>寄生式继承</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">   function createObj(o)&#123;</span><br><span class="line">	var clone &#x3D; Object.create(o);</span><br><span class="line">	clone.sayName &#x3D; function()&#123;</span><br><span class="line">		console.log(&#39;hi&#39;);</span><br><span class="line">	&#125;</span><br><span class="line">	return clone;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>创建一个仅用于封装继承过程的函数，在内部以某种形式来增强对象。方法被重复创建</p>
</blockquote>
</li>
<li><p>寄生组合式继承</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">   function object(o)&#123;</span><br><span class="line">	function F()&#123;&#125;</span><br><span class="line">	F.prototype &#x3D; o</span><br><span class="line">	return new F()</span><br><span class="line">&#125;</span><br><span class="line">		</span><br><span class="line">function prototype(child,parent)&#123;</span><br><span class="line">	var prototype &#x3D; object(parent.prototype)</span><br><span class="line">	prototype.constructor &#x3D; child</span><br><span class="line">	child.prototype &#x3D; prototype</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="instanceof的模拟实现"><a href="#instanceof的模拟实现" class="headerlink" title="instanceof的模拟实现"></a>instanceof的模拟实现</h2><blockquote>
<p>要点：原型链的向上查找</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function myInstanceof(data,obj)&#123;</span><br><span class="line">	if(typeof data !&#x3D;&#x3D; &#39;object&#39; || left &#x3D;&#x3D;&#x3D; null)</span><br><span class="line">		return false;</span><br><span class="line">	let proto &#x3D; Object.getPrototypeOf(data);</span><br><span class="line">	while(true)&#123;</span><br><span class="line">		if(proto &#x3D;&#x3D;&#x3D; null)</span><br><span class="line">			return false;</span><br><span class="line">		if(proto &#x3D;&#x3D;&#x3D; obj.prototype)</span><br><span class="line">			return true;</span><br><span class="line">		proto &#x3D; Object.getPrototypeOf(proto)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="call和apply的模拟实现"><a href="#call和apply的模拟实现" class="headerlink" title="call和apply的模拟实现"></a>call和apply的模拟实现</h2><blockquote>
<p>call和apply可以强制改变this的指向</p>
</blockquote>
<ol>
<li><p>call</p>
<ul>
<li>ver1.0  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">      Function.prototype.call2 &#x3D; function(context)&#123;</span><br><span class="line">	&#x2F;&#x2F;this可以获取调用call2的函数</span><br><span class="line">	context.fn &#x3D; this;		&#x2F;&#x2F;将函数设置为指定对象的属性</span><br><span class="line"></span><br><span class="line">	context.fn();			&#x2F;&#x2F;执行该函数</span><br><span class="line"></span><br><span class="line">	delete context.fn		&#x2F;&#x2F;删除该函数</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>ver2.0<blockquote>
<p>call函数还能给定参数执行函数</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">      Function.prototype.call2 &#x3D; function(context)&#123;</span><br><span class="line">	context.fn &#x3D; this;</span><br><span class="line"></span><br><span class="line">	var args &#x3D; [];</span><br><span class="line">	for(var i &#x3D; 1;i &lt; arguments.length;i++)&#123;</span><br><span class="line">		args.push(&#39;arguments[&#39; + i + &#39;]&#39;);</span><br><span class="line">	&#125;</span><br><span class="line">	eval(&#39;context.fn(&#39; + args + &#39;)&#39;);</span><br><span class="line"></span><br><span class="line">	delete context.fn;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote>
</li>
<li>ver3.0<blockquote>
<p>context参数可以传null，当为null时视为指向window。函数还可以有返回值</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">     Function.prototype.call2 &#x3D; function(context)&#123;</span><br><span class="line">var context &#x3D; context || window;</span><br><span class="line">context.fn &#x3D; this;</span><br><span class="line"></span><br><span class="line">var args &#x3D; [];</span><br><span class="line">for(var i &#x3D; 1;i &lt; arguments.length;i++)&#123;</span><br><span class="line">	args.push(&#39;arguments[&#39; + i + &#39;]&#39;);</span><br><span class="line">&#125;</span><br><span class="line">var result &#x3D; eval(&#39;context.fn(&#39; + args + &#39;)&#39;);</span><br><span class="line"></span><br><span class="line">delete context.fn;</span><br><span class="line">return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote>
</li>
<li>ES6版本</li>
</ul>
</li>
<li><p>apply</p>
<ul>
<li>ver1.0<blockquote>
<p>apply会传入一个数组</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Function.prototype.apply2 &#x3D; function(context,arr)&#123;</span><br><span class="line">    var context &#x3D; context || window;</span><br><span class="line">    context.fn &#x3D; this;</span><br><span class="line">    var result;</span><br><span class="line">    if(!arr)&#123;</span><br><span class="line">        result &#x3D; context.fn();</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        var args &#x3D; [];</span><br><span class="line">        for(var i &#x3D; 0;i&lt;arr.length;i++)&#123;</span><br><span class="line">            args.push(&#39;arr[&#39; + i + &#39;]&#39;);</span><br><span class="line">        &#125;</span><br><span class="line">        result &#x3D; eval(&#39;context.fn(&#39; + args + &#39;)&#39;);</span><br><span class="line">    &#125;</span><br><span class="line">    delete context.fn;</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote>
</li>
<li>ES6版本</li>
</ul>
</li>
</ol>
<h2 id="bind的模拟实现"><a href="#bind的模拟实现" class="headerlink" title="bind的模拟实现"></a>bind的模拟实现</h2><blockquote>
<p>bind方法会创建一个新函数。当这个新函数被调用时，bind的第一个参数将作为它运行时的this。之后的一系列参数将会在传递的实参前插入作为它的参数。</p>
</blockquote>
<ol>
<li><p>ver1.0</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">   Function.prototype.bind2 &#x3D; function(context)&#123;</span><br><span class="line">	var self &#x3D; this;</span><br><span class="line">	return function()&#123;</span><br><span class="line">		return self.apply(context);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>ver2.0</p>
<blockquote>
<p>可以传参。并且可以在bind时传一部分，调用返回的函数时再传一部分</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">   Function.prototype.bind2 &#x3D; function(context)&#123;</span><br><span class="line">	var self &#x3D; this;</span><br><span class="line">	&#x2F;&#x2F;获取bind2函数从第二个到最后一个参数</span><br><span class="line">	var args &#x3D; Array.prototype.slice.call(arguments,1);</span><br><span class="line">	return function() &#123;</span><br><span class="line">		&#x2F;&#x2F;这时的arguments是bind返回的函数传入的参数</span><br><span class="line">		var bindArgs &#x3D; Array.prototype.slice.call(arguments);</span><br><span class="line">		return self.apply(context,args.concat(bindArgs));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>ver3.0</p>
<blockquote>
<p>bind返回的函数作为构造函数时，bind指定的this会失效，但传入的参数仍然生效</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    Function.prototype.bind2 &#x3D; function(context)&#123;</span><br><span class="line">		var self &#x3D; this;</span><br><span class="line">		var args &#x3D; Array.prototype.slice.call(arguments,1);</span><br><span class="line">		var fBound &#x3D; function()&#123;</span><br><span class="line">			var bindArgs &#x3D; Array.prototype.slice.call(arguments);</span><br><span class="line">			&#x2F;&#x2F; 当作为构造函数时，this 指向实例，此时结果为 true，将绑定函数的 this 指向该实例，可以让实例获得来自绑定函数的值</span><br><span class="line">			&#x2F;&#x2F; 当作为普通函数时，this 指向 window，此时结果为 false，将绑定函数的 this 指向 context</span><br><span class="line">			return self.apply(this instanceof fBound?this:context,args.concat(bindArgs));</span><br><span class="line">		&#125;</span><br><span class="line">		fBound.prototype &#x3D; this.prototype;</span><br><span class="line">		return fBound;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">4. ver4.0</span><br><span class="line">    &gt;在3.0中直接将fBound.prototype &#x3D; this.prototype会导致修改fBound.prototype时也会直接修改绑定函数的prototype。这时可以通过一个空函数来中转</span><br></pre></td></tr></table></figure>
<p> Function.prototype.bind2 = function(context){</p>
<pre><code>if (typeof this !== &apos;function&apos;) {
    throw TypeError(&quot;Bind must be called on a function&quot;);
}   
//保存this
var self = this;</code></pre></blockquote>
<pre><code>//拿到参数传递给调用者
var args = Array.prototype.slice.call
(arguments,1);

//构建一个干净的函数，用于保存原函数的原型
var fNOP = function(){}

//绑定的函数
var fBound = function(){
    var bindArgs = Array.prototype.slice.call(arguments);
    return self.apply(this instanceof fNOP?this:context,args.concat(bindArgs));
}
fNOP.prototype = this.prototype;
fBound.prototype = new fNOP();
return fBound</code></pre><p> }</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">## new的模拟实现</span><br><span class="line">&gt;new运算符创建一个用户定义的对象类型的实例或具有构造函数的内置对象类型之一</span><br><span class="line"></span><br><span class="line">1. ver1.0</span><br></pre></td></tr></table></figure>
<p> function objectFactory() {</p>
<pre><code>var obj = new Object(),                
//创建实例对象

Constructor = [].shift.call(arguments)    
//取到传入的构造函数

obj.__proto__ = Constructor.prototype;    
//建立原型链,使obj能够访问到构造函数原型中的属性

Constructor.apply(obj,arguments)        
//使obj能够访问到构造函数中的属性

return obj;                                
//返回一个实例对象</code></pre><p> }</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">2. ver2.0</span><br><span class="line">    &gt;构造函数返回对象时的处理</span><br></pre></td></tr></table></figure>
<p> function objectFactory() {</p>
<pre><code>var obj = new Object(),

Constructor = [].shift.call(arguments);

obj.__proto__ = Constructor.prototype;

var res = Constructor.apply(obj,arguments);

return typeof res === &apos;object&apos;?res:obj</code></pre><p> }</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">## 防抖</span><br><span class="line">&gt;防抖：无论怎么触发事件，总是在事件触发n秒之后才执行</span><br><span class="line"></span><br><span class="line">1. ver1.0</span><br></pre></td></tr></table></figure>
<p> function debounce(func,wait){</p>
<pre><code>var timeout;
return function(){
    clearTimeout(timeout)
    timeout = setTimeout(func,wait)
}</code></pre><p> }<br> container.onmousemove = debounce(getUserAction,1000)</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    &gt;在不使用debounce时，getUserAction中的this指向container。   </span><br><span class="line">    使用之后，指向了window。</span><br><span class="line"></span><br><span class="line">2. ver2.0</span><br></pre></td></tr></table></figure>
<p> function debounce(func,wait){</p>
<pre><code>var timeout
return function(){
    var context = this
    clearTimeout(timeout)
    timeout = setTimeout(
    function(){
        console.log(this);
        func.apply(context)
        },wait
    )
}</code></pre><p> }</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    &gt;在不使用debounce时，事件对象event时MouseEvent对象  </span><br><span class="line">    使用之后，事件对象成了undefined。   </span><br><span class="line">    因为event传递给了debounce，没有传到getUserAction中</span><br><span class="line"></span><br><span class="line">3. ver3.0</span><br></pre></td></tr></table></figure>
<p> function debounce(func,wait){</p>
<pre><code>var timeout
return function(){
    var context = this
    var args = arguments
    clearTimeout(timeout)
    timeout = setTimeout(
        function(){
            func.apply(context,args)
        },wait
    )
}</code></pre><p> }</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">## 节流</span><br><span class="line">&gt;如果持续触发事件，则每隔一段时间执行一次事件</span><br><span class="line"></span><br><span class="line">1. 时间戳实现</span><br><span class="line">    &gt;当触发事件时，取出当前时间戳，减去之前的时间戳（初始值为0）。如果大于设置的时间周期，则执行函数并更新时间戳。</span><br></pre></td></tr></table></figure>
<p> function throttle(func,wait){</p>
<pre><code>var context,args
var pre = 0
return function(){
    var now = +new Date()
    context = this
    args = arguments
    if(now - pre &gt; wait){
        func.apply(context,args)
        pre = now
    }
}</code></pre><p> }<br> container.onmousemove = throttle(getUserAction,1000)</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2. 定时器实现</span><br><span class="line">    &gt;当第一次触发事件时，设置一个定时器。再次触发事件时，如果定时器存在，则不执行。直到定时器消失时，执行函数并清空定时器</span><br></pre></td></tr></table></figure>
<p> function throttle(func,wait){</p>
<pre><code>var timeout
var pre = 0
return function(){
    context = this
    args = arguments
    if(!timeout){
        timeout = setTimeout(
            function(){
                timeout = null
                func.apply(context,args)
            },wait
        )
    }
}</code></pre><p> }</p>
</li>
</ol>
]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>JS面试题</title>
    <url>/2020/02/23/jsQuestions/</url>
    <content><![CDATA[<h2 id=""><a href="#" class="headerlink" title="[] == ![]"></a>[] == ![]</h2><p>==中，左右两边都需要转换为数字进行比较<br>左边[]转换为数字0<br>![]需要转为一个布尔值，由于[]是一个引用类型，故![]转为false，再转为数字0<br>因此原式相当于0 == 0，<strong>结果为true</strong></p>
<a id="more"></a>
<h2 id="如何让if-a-1-amp-amp-a-2-条件成立？"><a href="#如何让if-a-1-amp-amp-a-2-条件成立？" class="headerlink" title="如何让if(a == 1 &amp;&amp; a == 2)条件成立？"></a>如何让if(a == 1 &amp;&amp; a == 2)条件成立？</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var a &#x3D; &#123;</span><br><span class="line">    value:0,</span><br><span class="line">    valueOf:function()&#123;</span><br><span class="line">        this.value++;</span><br><span class="line">        return this.value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="数组扁平化"><a href="#数组扁平化" class="headerlink" title="数组扁平化"></a>数组扁平化</h2><blockquote>
<p>let ary = [1, [2, [3, [4, 5]]], 6];<br>let str = JSON.stringify(ary);</p>
</blockquote>
<ol>
<li><p>ES6中的flat方法</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ary &#x3D; ary.flat(Infinity);</span><br></pre></td></tr></table></figure>
</li>
<li><p>replace + split</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ary &#x3D; str.replace(&#x2F;(\[|\])&#x2F;g,&#39;&#39;).split(&#39;,&#39;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>replace + JSON.parse</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">str &#x3D; str.replace(&#x2F;(\[|\])&#x2F;g,&#39;&#39;);</span><br><span class="line">str &#x3D; &#39;[&#39; + str + &#39;]&#39;;</span><br><span class="line">ary &#x3D; JSON.parse(str);</span><br></pre></td></tr></table></figure>
</li>
<li><p>递归</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let result &#x3D; [];</span><br><span class="line">let fun &#x3D; function(ary)&#123;</span><br><span class="line">    for(let i &#x3D; 0;i &lt; ary.length;i++)&#123;</span><br><span class="line">        let item &#x3D; ary[i];</span><br><span class="line">        if(Array.isArray(ary[i]))&#123;</span><br><span class="line">            fn(item);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            result.push(item);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>reduce</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function flatten(ary)&#123;</span><br><span class="line">    return ary.reduce(</span><br><span class="line">        (pre,cur) &#x3D;&gt; (</span><br><span class="line">            pre.concat(</span><br><span class="line">                Array.isArray(cur)?flatten(cur):cur</span><br><span class="line">            )</span><br><span class="line">        ),[]</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>扩展运算符</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">while(ary.some(Array.isArray))&#123;</span><br><span class="line">    ary &#x3D; [].concat(...ary)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h2><ol>
<li><p>双层for循环</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function distinct(arr) &#123;</span><br><span class="line">    for(let i &#x3D; 0,len &#x3D; arr.length;i &lt; len;i++)&#123;</span><br><span class="line">        for(let j &#x3D; i + 1;j &lt; len;j++)&#123;</span><br><span class="line">            if(arr[i] &#x3D;&#x3D;&#x3D; arr[j])&#123;</span><br><span class="line">                arr.splice(j,1);</span><br><span class="line">                &#x2F;&#x2F;splice会改变数组长度，故将下标长度减一</span><br><span class="line">                len--;</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Array.filter + indexOf</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function distinct(arr) &#123;</span><br><span class="line">    &#x2F;&#x2F;利用indexOf检查元素在数组中第一次出现的位置是否是当前位置，如果不是则该元素是重复元素</span><br><span class="line"></span><br><span class="line">    return arr.filter(</span><br><span class="line">        (item,index) &#x3D;&gt; &#123;</span><br><span class="line">            return arr.indexOf(item) &#x3D;&#x3D;&#x3D; index</span><br><span class="line">        &#125;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>排序 + 相邻元素去重</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function distinct(arr) &#123;</span><br><span class="line">    var res &#x3D; [];</span><br><span class="line">    var sortedArr &#x3D; arr.concat().sort();</span><br><span class="line">    var last;</span><br><span class="line">    for (var i &#x3D; 0,len &#x3D; sortedArr.length;i &lt; len;i++)&#123;</span><br><span class="line">        &#x2F;&#x2F;如果是第一个元素或相邻元素不相同</span><br><span class="line">        if(!i || last !&#x3D;&#x3D; sortedArr[i])&#123;</span><br><span class="line">            res.push(sortedArr[i])</span><br><span class="line">        &#125;</span><br><span class="line">        last &#x3D; sortedArr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    return res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>ES6的Set方法</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(arr) &#x3D;&gt; [...new Set(arr)]</span><br></pre></td></tr></table></figure>
</li>
<li><p>Object键值对</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function distinct(arr)&#123;</span><br><span class="line">    &#x2F;&#x2F;利用空对象，将数组的值存为Object的key值。如果obj没有item这一项属性，则将其设置为true。反之，如果有，说明之前设置过，即该项为重复项，返回false过滤之</span><br><span class="line">    var obj &#x3D; &#123;&#125;;</span><br><span class="line">    return arr.filter(</span><br><span class="line">        (item,index) &#x3D;&gt; (</span><br><span class="line">            &#x2F;&#x2F;用typeOf item + item是因为123和&#39;123&#39;在直接用item的情况下是无法分辨的，会被当做同一项</span><br><span class="line">            obj.hasOwnProperty(typeof item + item) ? false : (obj[typeof item + item] &#x3D; true)</span><br><span class="line">        )</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>reduce实现对象数组去重</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var res &#x3D; [</span><br><span class="line">        &#123; name: &quot;张三&quot;, age: &quot;18&quot; &#125;,</span><br><span class="line">        &#123; name: &quot;张三&quot;, age: &quot;19&quot; &#125;,</span><br><span class="line">        &#123; name: &quot;张三&quot;, age: &quot;20&quot; &#125;,</span><br><span class="line">        &#123; name: &quot;李四&quot;, age: &quot;19&quot; &#125;,</span><br><span class="line">        &#123; name: &quot;王五&quot;, age: &quot;20&quot; &#125;,</span><br><span class="line">        &#123; name: &quot;赵六&quot;, age: &quot;21&quot; &#125;</span><br><span class="line">    ]</span><br><span class="line">var temp &#x3D; &#123;&#125;;</span><br><span class="line">res &#x3D; res.reduce(</span><br><span class="line">    (pre,cur) &#x3D;&gt; &#123;</span><br><span class="line">        &#x2F;&#x2F;如果临时对象中没有该项名字就加入，同时加入到pre中</span><br><span class="line">        if(!temp[cur.name])&#123;</span><br><span class="line">            temp[cur.name] &#x3D; true;</span><br><span class="line">            pre.push(cur);</span><br><span class="line">        &#125;</span><br><span class="line">        return pre</span><br><span class="line">    &#125;,[]</span><br><span class="line">    &#x2F;&#x2F;initialValue得放一个空数组[]，不然没法push</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="web项目中常见的安全问题及防范"><a href="#web项目中常见的安全问题及防范" class="headerlink" title="web项目中常见的安全问题及防范"></a>web项目中常见的安全问题及防范</h2><ol>
<li><p>输入检查<br>防止输入注入型攻击。所有的输入数据都需要检查，除了前端检查之外，还要防止有些程序绕开前端检查直接把数据发送给服务器，后端也要检查所有输入数据。<br>根据产品文档进行合法性检查：数值型，手机号，邮箱等等。<br>检查文本是否含有控制字符，过滤之。<br>长度检查。<br>Querystring中参数值字符串转义，使用urlencode函数处理。</p>
</li>
<li><p>文件上传 </p>
<blockquote>
<p>防止文件注入型攻击 </p>
</blockquote>
<ul>
<li><p>文件上传目录设置为不可执行</p>
</li>
<li><p>判断文件类型，结合MIME type与文件拓展名设置文件白名单。对于图片文件，可以利用图片库函数深层次检查是否是真图片。</p>
</li>
<li><p>重命名文件名</p>
</li>
<li><p>文件服务器使用独立的域名</p>
</li>
</ul>
</li>
<li><p>输出转义<br>防止XSS（跨站脚本攻击）。向页面中输出的文本数据进行html encode，即将一些html中的特殊字符转换成普通字符。如&amp;转成&amp;amp；、&lt;转成&amp;lt；、’、”等等。对应函数：javascriptencode，php中的htmlentities。<br>同理，xml数据包中的字符串值使用xmlencode转义，json数据包的字符串值使用jsonencode转义。</p>
</li>
<li><p>XSS处理</p>
<blockquote>
<p>XSS的本质是HTML注入，用户输入的数据被当作代码执行</p>
</blockquote>
<ul>
<li><p>cookie使用HttpOnly限制<br>使得在客户端的js代码不能读取cookie的值，但是无法防止从HTTP header中获取。</p>
</li>
<li><p>输出文本HTML转义  </p>
</li>
<li><p>检查输入的url</p>
</li>
<li><p>对传入js函数的文本型参数值进行JavaScript转义</p>
</li>
</ul>
</li>
</ol>
<h2 id="居中为何要用transform而不用marginLeft等"><a href="#居中为何要用transform而不用marginLeft等" class="headerlink" title="居中为何要用transform而不用marginLeft等"></a>居中为何要用transform而不用marginLeft等</h2><p>transform属于合成属性，对合成属性进行transition/animation动画将会创建一个合成层，这使得动画元素在一个独立的层中进行动画。通常情况下，浏览器会将一个层中的内容先绘制进一个位图当中，然后再作为纹理上传到GPU，只要该层的内容不改变，就不会引发重绘，浏览器会通过重新复合来形成一个新的帧。</p>
<p>top/left属于布局属性，该属性的变化会导致重排，即对这些节点及受这些节点影响的其他节点进行CSS计算→布局→重绘过程，浏览器需要将整个层重绘并重新上传到GPU，造成了极大的性能开销。</p>
<h2 id="发布-订阅模式-vs-观察者模式"><a href="#发布-订阅模式-vs-观察者模式" class="headerlink" title="发布-订阅模式 vs 观察者模式"></a>发布-订阅模式 vs 观察者模式</h2><p><img src="../images/pubsub.png" alt="模式"></p>
<ul>
<li><p>在观察者模式中，观察者是知道发布者的存在的，而发布者也一直保持着对观察者的记录。在发布-订阅模式中，发布者和订阅者不知道对方的存在，它们通过消息代理进行通信。</p>
</li>
<li><p>发布-订阅模式中，组件是松散耦合的。观察者模式中则恰恰相反。</p>
</li>
<li><p>观察者模式通常是同步的。即当事件触发时，发布者就会去调用观察者的方法。而发布-订阅模式通常是异步的（消息队列）。</p>
</li>
<li><p>观察者模式需要在单个应用程序地址空间中实现，而发布-订阅模式更像交叉应用模式。</p>
</li>
</ul>
<h2 id="通用柯里化函数"><a href="#通用柯里化函数" class="headerlink" title="通用柯里化函数"></a>通用柯里化函数</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function curry(fn,...args)&#123;</span><br><span class="line">    var length &#x3D; fn.length;</span><br><span class="line">    args &#x3D; args || [];</span><br><span class="line">    return function(...rest)&#123;</span><br><span class="line">        var _args &#x3D; [...args,...rest];</span><br><span class="line">        return _args.length &lt; length ? curry(fn,_args) : fn.apply(this,_args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>面试题</tag>
      </tags>
  </entry>
  <entry>
    <title>JS基础知识</title>
    <url>/2020/02/23/jsBasic/</url>
    <content><![CDATA[<h2 id="js数据类型"><a href="#js数据类型" class="headerlink" title="js数据类型"></a>js数据类型</h2><blockquote>
<p>js共有六种数据类型：number、string、boolean、undefined、null、object(BigInt、symbol)<br>其中object属于引用数据类型，其他的称为基本数据类型</p>
</blockquote>
<ul>
<li><p>number：</p>
<ul>
<li>js可以表示的数字最大值为Number.MAX_VALUE，绝对值最小值为Number.MIN_VALUE</li>
<li>如果使用number表示的值超过了最大值，则会返回infinity表示正无穷</li>
<li>在js中进行浮点数运算可能得到一个不精确的结果</li>
</ul>
</li>
<li><p>null：<strong>typeof null === “object”</strong>，但是null并不是对象</p>
</li>
<li><p>undefined：当声明一个变量却不给它赋值时，它的值为undefined</p>
<a id="more"></a>
<h2 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h2></li>
</ul>
<ol>
<li><p>转为string</p>
<ul>
<li>调用被转换数据类型的toString方法，返回转换结果。null和undefined没有该方法</li>
<li>调用String函数，返回转换结果。对于boolean和number实际上就是调用其toString方法</li>
<li>+“”</li>
</ul>
</li>
<li><p>转为number</p>
<ul>
<li>使用Number函数<ul>
<li>若是纯数字字符串，则转换为数字</li>
<li>若字符串中含有非数字，则转换为NaN</li>
<li>若为空串，则转换为0</li>
<li>true转换为1，false转换为0</li>
<li>null转换为0</li>
<li>undefined转换为NaN</li>
<li>空数组转换为0</li>
<li>空对象转换为NaN</li>
<li>对象调用其valueOf()</li>
</ul>
</li>
<li>使用parseInt、parseFloat函数（字符串专用）<ul>
<li>parseInt：将一个字符串中有效的整数提取出来（从左往右识别），一个都没有则返回NaN</li>
<li>parseFloat：取小数</li>
<li>若对非string类型使用上述两个函数，则会先转为string再操作</li>
<li>上述函数第二个参数可以指定数字的进制</li>
</ul>
</li>
<li>-0</li>
<li>*1</li>
<li>/1</li>
</ul>
</li>
<li><p>转为boolean</p>
<ul>
<li>使用Boolean函数<ul>
<li>数字：除了0和NaN都为true</li>
<li>字符串：除了空串都为true</li>
<li>null和undefined都为false</li>
</ul>
</li>
</ul>
</li>
</ol>
<h2 id="this"><a href="#this" class="headerlink" title="this"></a>this</h2><blockquote>
<p>以函数形式调用时，this永远指向window对象<br>以方法形式调用时，this就是调用该方法的对象<br>以构造函数形式调用时，this指向新建的对象</p>
</blockquote>
<h2 id="原型和原型链"><a href="#原型和原型链" class="headerlink" title="原型和原型链"></a>原型和原型链</h2><p><img src="/images/prototype.png" alt="原型链"></p>
<blockquote>
<p>上图中蓝色的即为原型链</p>
</blockquote>
<p><strong>prototype属性只有函数才有</strong></p>
<p>obj.__proto__相当于Object.getPrototypeOf(obj)</p>
<p>在上图中，如果我们去获取person.constructor，这时person中并没有constructor属性。那么它会从person的原型，即Person.prototype中读取。<br>因此<strong>person.constructor===Person.prototype.constructor === Person</strong></p>
<h2 id="typeof和instanceof"><a href="#typeof和instanceof" class="headerlink" title="typeof和instanceof"></a>typeof和instanceof</h2><ul>
<li><p>对于原始类型，除了null都可以调用typeof显示正确类型<br>但是对于引用数据类型，除了函数外都会显示object</p>
</li>
<li><p>对于引用数据类型使用instanceof判断会更好。只要检索的数据位于某对象原型链上即返回true</p>
</li>
</ul>
<h2 id="类数组对象"><a href="#类数组对象" class="headerlink" title="类数组对象"></a>类数组对象</h2><blockquote>
<p>类数组对象：拥有一个length属性和若干索引属性的对象（无法使用数组方法）</p>
</blockquote>
<ul>
<li><p>间接调用类数组对象：  </p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var arrayLike &#x3D; &#123;</span><br><span class="line">    0:&#39;name&#39;,</span><br><span class="line">    1:&#39;age&#39;,</span><br><span class="line">    2:&#39;sex&#39;,</span><br><span class="line">    length:3</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">Array.prototype.join.call(arrayLike,&#39;&amp;&#39;);</span><br><span class="line">&#x2F;&#x2F;name&amp;age&amp;sex</span><br><span class="line"></span><br><span class="line">Array.prototype.slice.call(arrayLike, 0);</span><br><span class="line">&#x2F;&#x2F;[&quot;name&quot;, &quot;age&quot;, &quot;sex&quot;]</span><br><span class="line"></span><br><span class="line">Array.prototype.map.call(arrayLike, function(item)&#123;</span><br><span class="line">    return item.toUpperCase();</span><br><span class="line">&#125;);</span><br><span class="line">&#x2F;&#x2F;[&quot;NAME&quot;, &quot;AGE&quot;, &quot;SEX&quot;]</span><br></pre></td></tr></table></figure>
</li>
<li><p>类数组转数组  </p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var arrayLike &#x3D; &#123;</span><br><span class="line">    0:&#39;name&#39;,</span><br><span class="line">    1:&#39;age&#39;,</span><br><span class="line">    2:&#39;sex&#39;,</span><br><span class="line">    length:3</span><br><span class="line">&#125; </span><br><span class="line">&#x2F;&#x2F;1</span><br><span class="line">Array.prototype.slice.call(arrayLike);</span><br><span class="line">&#x2F;&#x2F;2</span><br><span class="line">Array.prototype.splice.call(arrayLike, 0);</span><br><span class="line">&#x2F;&#x2F;3</span><br><span class="line">Array.from(arrayLike);</span><br><span class="line">&#x2F;&#x2F;4</span><br><span class="line">Array.prototype.concat.apply([], arrayLike)</span><br><span class="line">&#x2F;&#x2F;ES6展开运算符</span><br><span class="line">[...arrayLike]</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="浅拷贝和深拷贝"><a href="#浅拷贝和深拷贝" class="headerlink" title="浅拷贝和深拷贝"></a>浅拷贝和深拷贝</h2><blockquote>
<p>浅拷贝：复制引用的拷贝方式<br>深拷贝：完全地拷贝一个对象，即使是一个嵌套了对象的对象，二者也是相互独立的，修改一个对象的属性不会影响另一个</p>
</blockquote>
<ul>
<li>深拷贝数组或对象：  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">JSON.parse(JSON.stringify(arr))</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="V8引擎的垃圾回收"><a href="#V8引擎的垃圾回收" class="headerlink" title="V8引擎的垃圾回收"></a>V8引擎的垃圾回收</h2><blockquote>
<p>JS采用自己的一套垃圾回收算法进行自动的内存管理</p>
</blockquote>
<ul>
<li><p>V8内存限制<br>V8只能使用系统的一部分内存。具体来说，在64位系统下，V8最多只能分配1.4G；在32位系统下，最多只能分配0.7G。<br>这么做的原因是由两个因素共同决定的：一是JS单线程的执行机制，另一个是JS垃圾回收机制的限制。<br>首先，JS是单线程运行的，一旦进入到垃圾回收阶段，其他的各种运行逻辑都要暂停。其次，垃圾回收是一个非常耗时的操作。所以，V8通过限制堆内存来获取更快的响应速度。</p>
</li>
<li><p>内存的回收<br>V8把堆内存分成了两部分——新生代内存和老生代内存。<br>新生代内存就是临时分配的内存，存活时间短。老生代时常驻内存，存活时间长。V8的堆内存就是这两个内存之和。<br><img src="../images/memory.png" alt="新老生代内存"></p>
<ul>
<li><p>新生代内存回收策略（Scavenge算法）：<br>新生代内存在64位系统和32位系统下的默认限制分别为32Mb和16Mb。<br>首先将新生代内存一分为二：<br><img src="../images/memory2.png" alt="新生代内存"><br>其中From部分表示正在使用的内存，To是目前闲置的内存。<br>当进行垃圾回收时，V8将From部分的对象检查一遍，如果是存活对象则复制到To内存中（顺序摆放），如果是非存活对象直接回收即可。<br>当所有的From中的存活对象按照顺序进入到To内存之后，二者<strong>角色互换</strong>。From现在被闲置，To位正在使用，如此循环。<br>这样的操作可以使正在使用的内存区中的数据顺序摆放，便于后续的空间分配。</p>
</li>
<li><p>老生代内存回收策略：<br>如果新生代内存中的变量经过多次回收后仍然存在，则会被放入老生代内存中，这种现象称为<strong>晋升</strong><br>以下操作会触发晋升：</p>
<ul>
<li><p>已经经历过一次Scavenge回收</p>
</li>
<li><p>新生代中闲置空间内存占用超过25%</p>
<p>第一步进行标记-清除。首先遍历堆中的所有对象，对它们做上标记，然后对于代码环境中<strong>使用的变量</strong>以及被<strong>强引用</strong>的变量取消标记。然后在清除阶段进行空间回收<br>第二步，整理内存碎片。在清除阶段结束之后，把存活的对象全部往一端靠拢。由于是移动对象，执行速度慢，故此阶段是整个过程中最耗时的部分。</p>
</li>
</ul>
</li>
<li><p>增量标记<br>由于JS的单线程机制，V8在进行垃圾回收时，不可避免地会阻塞业务逻辑的执行。如果老生代的垃圾回收任务很重，那么会严重地影响应用的性能。为了避免这样的问题，V8采取了增量标记的方案，即将一口气完成的标记任务分为很多小的部分完成，每完成一个小部分就转而去执行js应用逻辑，之后再继续进行垃圾回收，如此循环。</p>
</li>
</ul>
</li>
</ul>
<h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><h3 id="Promise的特性及使用"><a href="#Promise的特性及使用" class="headerlink" title="Promise的特性及使用"></a>Promise的特性及使用</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let p &#x3D; new Promise(function(resolve,reject)&#123;</span><br><span class="line">    let value &#x3D; 100;</span><br><span class="line">    setTimeout(function()&#123;</span><br><span class="line">        value +&#x3D; 100;</span><br><span class="line">        resolve(value);</span><br><span class="line">    &#125;,2000);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">p.then(function(value)&#123;</span><br><span class="line">    console.log(value)      &#x2F;&#x2F;value:200</span><br><span class="line">&#125;,function(err)&#123;</span><br><span class="line">    &#x2F;&#x2F;do something</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>首先通过<strong>new</strong>关键词实例化一个Promise对象，在这个对象中传入一个要执行异步操作的函数。该函数包含两个形参：resolve和reject。这两个形参是Promise中定义的2个函数，分别在异步事件成功和失败时调用。在上述代码中我们在2秒后调用了resolve函数，代表着异步事件的成功，返回一个值。而我们在后面又调用了Promise实例的then方法。then方法接收两个函数作为参数，分别在异步事件成功或失败时执行，并且两个函数的参数正是异步事件<strong>成功时返回的值</strong>或<strong>失败的原因</strong>   </p>
<p>Promise构造函数是同步执行的，then函数是异步执行的</p>
<h3 id="Promise的状态"><a href="#Promise的状态" class="headerlink" title="Promise的状态"></a>Promise的状态</h3><p>一个Promise对象在实例化后可能拥有以下三种状态的其中之一：</p>
<ol>
<li><p>Fulfilled - 当传入的异步事件成功返回值时的状态</p>
</li>
<li><p>Rejected - 当传入的异步事件失败或产生异常时的状态</p>
</li>
<li><p>Pending - 当传入的异步事件还没有结果返回时的状态</p>
</li>
</ol>
<p>任何时候Promise对象都只能处于以上状态中的一种。当Promise对象处于Pending状态时，它可以转化成其他两种状态其中的一种。而处于Fulfilled或Rejected状态时，它无法再转化。状态一旦改变就无法再变。</p>
<h3 id="几个函数"><a href="#几个函数" class="headerlink" title="几个函数"></a>几个函数</h3><ol>
<li><p>resolve<br>resolve方法是在一个Promise对象实例化时传入的任务函数的第一个参数，它的作用是让Promise进入Fulfilled状态，resolve函数只接受一个参数，即异步事件的返回值value。多次调用下只有第一次执行有效。</p>
</li>
<li><p>reject<br>reject方法是在一个Promise对象实例化时传入的任务函数的第二个参数，它的作用是让Promise进入Rejected状态。它同样只接受一个参数，即异步事件失败或异常的原因reason。多次调用下只有第一次执行有效。</p>
</li>
<li><p>then     </p>
<ul>
<li><p>then是Promise实例的方法，用于注册Promise对象成功或失败时执行的回调函数。<strong>一个then方法的返回值仍然是一个Promise对象</strong>，因此then方法支持链式调用。在相链接的then方法中，上一个then方法的回调函数中通过return value（reason）的方式，把这个返回值作为下一个then中的回调函数的参数被接受。then中的回调函数的返回值可以是任何js值，甚至一个Promise对象的成功或失败时的回调函数可以返回一个新的Promise对象。     </p>
</li>
<li><p>then方法中的回调函数是可以省略的    </p>
</li>
<li><p>当一个Promise失败返回了reason，而then方法没有定义失败时的回调函数时，这个reason会被链式调用的下一个then方法的失败回调函数接收</p>
</li>
<li><p>其参数期望值是一个函数，传入非函数值会发生值穿透，即第一个有效值作为最后结果</p>
</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML基础知识</title>
    <url>/2020/02/23/htmlBasic/</url>
    <content><![CDATA[<h2 id="块元素和内联元素"><a href="#块元素和内联元素" class="headerlink" title="块元素和内联元素"></a>块元素和内联元素</h2><blockquote>
<p>块元素：独占一行的元素，入div、p、h1等等<br>内联元素（行内元素）：只占自身大小的元素，如a、span等等</p>
</blockquote>
<p>一般情况下只用块元素包含内联元素<br>a元素可以包含任何元素，<strong>除了它本身</strong><br>p元素不能包含任何块元素</p>
<a id="more"></a>
<h2 id="css选择器"><a href="#css选择器" class="headerlink" title="css选择器"></a>css选择器</h2><blockquote>
<p>css由选择器和声明块组成，声明块中的一组组<em>名值对</em>称为声明</p>
</blockquote>
<h4 id="各类选择器："><a href="#各类选择器：" class="headerlink" title="各类选择器："></a>各类选择器：</h4><ul>
<li><p>元素选择器：选择页面中的所有指定元素<br>  `h1{</p>
<pre><code>...</code></pre><p>  }`</p>
</li>
<li><p>id选择器：通过元素的id选择唯一的指定元素<br>  `#id{</p>
<pre><code>...</code></pre><p>  }`</p>
</li>
<li><p>类选择器：通过元素的class属性选择一组元素<br>  `.className{</p>
<pre><code>...</code></pre><p>  }`</p>
</li>
<li><p>通配选择器：选中所有元素  </p>
<blockquote>
<p>不建议使用，拉低性能</p>
</blockquote>
<p>  `*{</p>
<pre><code>...</code></pre><p>  }`</p>
</li>
<li><p>伪类选择器：选择某种特殊状态中的元素<br>  `a:link{</p>
<pre><code>...</code></pre><p>  }`</p>
</li>
<li><p>伪元素选择器：选择某些特殊位置的元素<br>  `p:first-letter{</p>
<pre><code>...</code></pre><p>  }`</p>
</li>
<li><p>属性选择器：根据元素的某个属性值选择元素<br>  `input[placeholder=”input”]{</p>
<pre><code>...</code></pre><p>  }`</p>
</li>
<li><p>兄弟元素选择器：选择兄弟元素<br>  `h1 + p {</p>
<pre><code>//选择h1后紧邻的单个兄弟元素  </code></pre><p>  }<code></code>h1 ~ p {</p>
<pre><code>//选择h1后所有的兄弟元素  </code></pre><p>  }`</p>
</li>
<li><p>后代元素选择器（包含选择器）：选择后代元素<br>  `h1 p{</p>
<pre><code>...</code></pre><p>  }`</p>
</li>
<li><p>子元素选择器：选择子元素<br>  `h1 &gt; p{</p>
<pre><code>...</code></pre><p>  }`</p>
</li>
</ul>
<h4 id="选择器的优先级"><a href="#选择器的优先级" class="headerlink" title="选择器的优先级"></a>选择器的优先级</h4><ol>
<li>内联样式（1000）  </li>
<li>id选择器（100）   </li>
<li>类和伪类（10）    </li>
<li>元素选择器（1）   </li>
<li>通配选择器    </li>
<li>继承的样式（无优先级）</li>
</ol>
<p>有交集选择器时，优先级叠加<br>并集选择器优先级互相独立</p>
<p>优先级相同时，选择靠后的样式<br><strong>!important</strong>标注的样式获得最高优先级</p>
<h4 id="a元素伪类编写顺序"><a href="#a元素伪类编写顺序" class="headerlink" title="a元素伪类编写顺序"></a>a元素伪类编写顺序</h4><blockquote>
<p>link visited hover active</p>
</blockquote>
<h2 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h2><blockquote>
<p>盒子模型：内容区（content）、内边距（padding）、边框（border）、外边距（margin）<br>盒子大小由内容区、内边距、边框共同决定</p>
</blockquote>
<p>由于页面中的元素都是靠左靠上摆放的，所以当我们设置上、左外边距时会改变盒子自身的位置，而设置其他两个外边距则会改变其他盒子的位置</p>
<p>当元素的宽度值为auto时，指定内边距不会影响可见框的大小，而是会自动修改宽度以适应内边距</p>
<h2 id="垂直外边距重叠"><a href="#垂直外边距重叠" class="headerlink" title="垂直外边距重叠"></a>垂直外边距重叠</h2><p>在网页中垂直方向的相邻外边距会发生外边距的重叠<br>兄弟元素之间的相邻外边距会取二者的最大值而不是求和<br>父子元素的垂直外边距如果相邻，则子元素的外边距会设置给父元素</p>
<h2 id="display-none和visibility-hidden"><a href="#display-none和visibility-hidden" class="headerlink" title="display:none和visibility:hidden"></a>display:none和visibility:hidden</h2><p>display:none：隐藏元素，且不再占用位置<br>visibility:hidden：隐藏元素，保留该元素在网页中的位置</p>
<h2 id="文档流"><a href="#文档流" class="headerlink" title="文档流"></a>文档流</h2><blockquote>
<p>文档流处于网页最底层，它表示的是一个网页中的位置，我们创建的元素默认都在文档流中</p>
</blockquote>
<ul>
<li>块元素在文档流中：    <ul>
<li>独占一行，自上向下排列</li>
<li>默认宽度是父元素的100%（auto）</li>
<li>默认高度被内容撑开</li>
</ul>
</li>
<li>内联元素在文档流中：<ul>
<li>只占自身大小，默认从左向右排列，容纳不了则换行</li>
<li>不能设置宽高</li>
<li>默认宽度和默认高度都被内容撑开</li>
</ul>
</li>
</ul>
<p>float可以使元素浮动，脱离文档流<br>元素浮动之后，会像左上或右上移动，直到遇到父元素的边框或者其他浮动元素<br>如果浮动元素上面是一个没有浮动的块元素，则浮动元素不会超过块元素<br>如果一行容不下多个浮动元素，则会发生自动换行<br>文字会自动环绕在浮动元素周围</p>
<p>元素脱离文档流之后，其后元素会补上空缺的位置<br>块元素脱离文档流之后，默认宽高均被内容撑开<br>内联元素脱离文档流之后会变成块元素</p>
<h2 id="父元素高度塌陷"><a href="#父元素高度塌陷" class="headerlink" title="父元素高度塌陷"></a>父元素高度塌陷</h2><blockquote>
<p>在文档流中，父元素的默认高度是被子元素所撑开的。但是当子元素设置浮动之后，它脱离了文档流，导致子元素无法继续撑开父元素的高度，这时父元素发生高度塌陷。父元素高度塌陷之后，父元素下面的元素会向上挤，导致网页布局混乱。</p>
</blockquote>
<h4 id="如何解决"><a href="#如何解决" class="headerlink" title="如何解决"></a>如何解决</h4><ol>
<li><p>开启BFC  </p>
<ul>
<li>根据w3c标准，页面中的元素都有一个隐含属性block formatting context，即<strong>BFC</strong>。它的默认值是关闭。开启BFC之后，元素会具有以下特性：     <ul>
<li>父元素的垂直外边距不会和子元素重叠</li>
<li>开启BFC的元素不会被浮动元素所覆盖</li>
<li>开启BFC的元素可以包含浮动的子元素 </li>
</ul>
</li>
<li>如何开启BFC（均有一定副作用）<ul>
<li>设置元素浮动</li>
<li>设置元素绝对定位</li>
<li>设置元素为inline-block</li>
<li>将元素的overflow设置为一个非visible的值（推荐hidden）</li>
</ul>
</li>
<li>IE6及以下不支持BFC，但是有另一个隐含属hasLayout，开启后也可解决问题。开启方式推荐将元素的zoom设置为1.同时，设置宽度width也会开启hasLayout</li>
</ul>
</li>
<li><p>空白div</p>
<ul>
<li>在高度塌陷的父元素最后添加一个空白的div，该div用于撑开父元素高度。当之前的子元素浮动导致了高度塌陷时，在空白div中清除浮动，即可解决高度塌陷问题。缺点是添加了多余的结构</li>
</ul>
</li>
<li><p>after伪类</p>
<ul>
<li>通过after伪类在高度塌陷的父元素最后添加一个空白的块元素（display），然后对其进行浮动清除，原理同2。几乎无副作用（IE6及以下不支持，需用zoom）。该方法还可提取到css文件中，便于调用</li>
</ul>
</li>
</ol>
<h2 id="position"><a href="#position" class="headerlink" title="position"></a>position</h2><blockquote>
<p>position属性可用于设置元素的定位</p>
</blockquote>
<ul>
<li><p>static：默认值，元素未开启定位</p>
</li>
<li><p>relative：开启元素的相对定位</p>
<ul>
<li>相对定位的元素不会脱离文档流，它的位置还会被保留</li>
<li>当元素开启了相对定位而不设置偏移量时，元素本身无任何变化</li>
<li>相对定位是相对于元素在文档流中的原位置进行定位</li>
<li>相对定位会使元素提升一个层级</li>
</ul>
</li>
<li><p>absolute：开启元素的绝对定位</p>
<ul>
<li>开启绝对定位会使元素脱离文档流</li>
<li>当元素开启了绝对定位而不设置偏移量时，元素本身无任何变化</li>
<li>绝对定位是相对于与其最近的开启了定位的祖先元素进行定位的。如果没有，则相对于浏览器窗口进行定位。所以一般情况下，开启了某元素的绝对定位之后，我们会同时开启其父元素的相对定位</li>
<li>绝对定位会使元素提升一个层级</li>
</ul>
</li>
<li><p>fixed：固定定位（绝对定位的一种）</p>
<ul>
<li>大部分性质跟绝对定位一样</li>
<li>不同的是固定定位永远相对于浏览器窗口进行定位</li>
<li>不会因为滚动条的移动而消失</li>
<li>IE6及以下不支持</li>
</ul>
</li>
</ul>
<p>如果定位元素的层级相同，则结构上下面的元素会覆盖上面的元素<br>无论父元素层级多高，它都不会覆盖子元素<br><strong>对于开启了定位的元素</strong>，可以通过z-index为其指定层级<br>绝对定位或固定定位时同时设置left和right等同于隐式地设置宽度</p>
<h2 id="同时解决外边距重叠和高度塌陷问题"><a href="#同时解决外边距重叠和高度塌陷问题" class="headerlink" title="同时解决外边距重叠和高度塌陷问题"></a>同时解决外边距重叠和高度塌陷问题</h2><pre><code>clearfix:before,
clearfix:after{
    content:&quot;&quot;;
    display:table;
    clear:both;
}</code></pre><h2 id="解决图片在flex下失真的情况"><a href="#解决图片在flex下失真的情况" class="headerlink" title="解决图片在flex下失真的情况"></a>解决图片在flex下失真的情况</h2><ol>
<li>flex-shrink：0<br>给img设置flex-shrink：0。<br>flex-shrink的默认值为1，如果没有显式定义该属性，浏览器将会自动按照默认值1在所有因子相加之后计算比例来进行空间收缩。设置为0表示不收缩。<br>flex元素仅在默认宽度之和大于容器的时候才会发生收缩，其收缩的大小是根据flex-shrink的值。（仅兼容IE11）</li>
<li>height：100%<br>在父元素没有设置高度的情况下，给图片设置height：100% </li>
<li>外层div标签包裹<br>用div标签包裹图片（产生了无用结构）</li>
</ol>
<h2 id="background"><a href="#background" class="headerlink" title="background"></a>background</h2><p>background-position：图片自身地百分比位置与容器同样的百分比位置重合</p>
]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS小技巧</title>
    <url>/2020/02/23/css/</url>
    <content><![CDATA[<h2 id="自定义弹窗"><a href="#自定义弹窗" class="headerlink" title="自定义弹窗"></a>自定义弹窗</h2><blockquote>
<p>主要思路是弄一个半透明的遮罩</p>
</blockquote>
<pre><code>#bc{
    display: none;
    position: fixed;
    left: 0;
    top:0;
    width: 100%;
    height:100%;
    background-color: rgba(0,0,0,0.5)
}</code></pre><a id="more"></a>
<h2 id="定宽高比"><a href="#定宽高比" class="headerlink" title="定宽高比"></a>定宽高比</h2><blockquote>
<p>padding的百分比是相对于其包含块的宽度来确定的</p>
</blockquote>
<pre><code>div{
    width: 100px;
    background: red;
    display: flex;
}   
div:after{
        content: &apos;&apos;;
        padding-top: 100%;
}</code></pre>]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>技巧</tag>
      </tags>
  </entry>
</search>
